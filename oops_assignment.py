# -*- coding: utf-8 -*-
"""oops assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O2kP66si5EwFWBBijdMZxFU4TGCCI6dL

**Write a Rectangle class in Python language, allowing you to build a rectangle with length and width attributes.Create a Perimeter() method to calculate the perimeter of the rectangle and a Area() method to calculate the area of ​​the rectangle.Create a method display() that display the length, width, perimeter and area of an object created using an instantiation on rectangle class.Create a Parallelepipede child class inheriting from the Rectangle class and with a height attribute and another Volume() method to calculate the volume of the Parallelepiped. **
"""

class Rectangle:
  def __init__(self):
    self.length=int(input("Enter length: "))
    self.width=int(input("Enter width: "))
  def Perimeter(self):
    return 2*(self.length+self.width)    
  def Area(self):
    return (self.length*self.width)
  def display(self):
    print("Length=",self.length)
    print("Width=",self.width)
    print("Perimeter=",self.Perimeter())
    print("Area=",self.Area())
class Parallelepipede(Rectangle):
  def __init__(self):
    Rectangle.__init__(self)
    self.height=int(input("Enter Height: "))
  def Volume(self):
    return self.height*self.length*self.width
p1=Parallelepipede()

p1.Perimeter()

p1=Parallelepipede()

p1.Volume()

"""**Create a Python class Person with attributes: name and age of type string.Create a display() method that displays the name and age of an object created via the Person class.Create a child class Student  which inherits from the Person class and which also has a section attribute.Create a method displayStudent() that displays the name, age and section of an object created via the Student class.Create a student object via an instantiation on the Student class and then test the displayStudent method.
**
"""

class Person:
  def __init__(self):
    self.name=input("Enter Nmae:")
    self.age=(input("Enter Age:"))
  def Display(self):
    print("Name: ",self.name)
    print("Age: ",self.age)
class Student(Person):
  def __init__(self):
    Person.__init__(self)
    self.section=input("Enter Section: ")
  def displaystudent(self):
    print("Name of Student: ",self.name)
    print("Age of Student: ",self.age)
    print("Section of Student: ",self.section)

p1=Person()

p1.Display()

s1=Student()

s1.displaystudent()

"""**Create a Python class called BankAccount which represents a bank account, having as attributes: accountNumber (numeric type), name (name of the account owner as string type), balance.Create a constructor with parameters: accountNumber, name, balance.Create a Deposit() method which manages the deposit actions.Create a Withdrawal() method  which manages withdrawals actions.Create an bankFees() method to apply the bank fees with a percentage of 5% of the balance account.Create a display() method to display account details.Give the complete code for the  BankAccount class.**"""

class BankAccount:
  def __init__(self,accno,name,balance):
    self.accno=accno
    self.name=name
    self.balance=balance
  def Deposit(self,deposit):
    self.balance=self.balance + deposit
  def Withdrawal(self,withdrawal):
    if self.balance < withdrawal:
      print("Withdrawl amount is More than Balance")
    else:
      self.balance=self.balance-withdrawal
  def bankFees(self):
    return print("Bank Fees: ",(5/100)*self.balance)
  def display(self):
    print("Account Number: ",self.accno)
    print("Account Holder Name: ",self.name)
    print("Account Balance: ",self.balance)

b1=BankAccount(1213,"parikshit",5000)

b1.Deposit(500)

b1.Withdrawal(600)

b1.display()

b1.bankFees()

"""Define a Book class with the following attributes: Title, Author (Full name), Price.Define a constructor used to initialize the attributes of the method with values entered by the user.Set the View() method to display information for the current book.Write a program to testing the Book class."""

class Book:
  def __init__(self):
    self.Title=input("Enter Title: ")
    self.Author=input("Enter Author Full Name: ")
    self.Price=(input("Enter Price: "))
  def View(self):
    print("Title: ",self.Title)
    print("Author Name: ",self.Author)
    print("Price: ",self.Price)
b1=Book()
b1.View()

"""** - Create a class called TK_extended which inherits from TK class and having the attributes:
- Master: that represents the name of the main window
- title: that represents the title of the main window
2 - Create a method called create() that creates the window
3 - Create a method called resize(width, height) that can resize the window.
4 - Create a method called generate() to generate the window
 **
"""



"""**Create a child class Bus that will inherit all of the variables and methods of the Vehicle class. In the vehicle class create relevant methods and variables.


2. Define a property that must have the same value for every class instance (object). Define a class attribute "color” with a default value white. I.e., Every Vehicle should be white.**
"""

class Vehicle:
    def __init__(self, name, mileage, capacity):
        self.name = name
        self.mileage = mileage
        self.capacity = capacity

    def fare(self):
        return self.capacity * 100

class Bus(Vehicle):
  def __init__(self,name, mileage, capacity,color="White"):
    Vehicle.__init__(self, name, mileage, capacity)
    self.color=color
  def info(self):
    print("Vehicle name: ",self.name,"\nMileage: ",self.mileage,"\nCapacity: ",self.capacity,"\nFare: ",self.fare(),"\nColor: ",self.color)
b1= Bus("tata tampo", 12, 50)
b1.info()